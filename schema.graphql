enum Adlib {
  datway
  drip
  itsLit
  splash
  straightUp
  twentyone
  wuh
  yuh
}

type Battle {
  active: Boolean!
  gameRound: GameRound!
  id: ID!
  participations: [BattleParticipation!]!
  votes: [Vote!]!
}

input BattleCreateInput {
  battleParticipationsCreateInput: [BattleParticipationCreateInput!]!
  gameCode: ID!
  roundIndex: Int!
}

input BattleNextActiveInput {
  battleId: ID!
}

type BattleNextActivePayload {
  newBattle: Battle!
  oldBattle: Battle!
}

type BattleParticipation {
  """we use a service for this so this is the link to that service"""
  audioURL: String
  battle: Battle!
  id: ID!
  openAIFirstPart: String
  participant: GameUserLink!
  rapText: String
  userMiddlePart: String
  votes: [Vote!]!
}

input BattleParticipationCreateInput {
  attribute1: String
  attribute2: String
  attribute3: String
  battleId: ID!
  openAIFirstPart: String
  participantId: ID!
  rapText: String
  userMiddlePart: String
}

input BattleParticipationUpdateInput {
  attribute1: String
  attribute2: String
  attribute3: String
  battleId: ID
  openAIFirstPart: String
  participantId: ID
  rapText: String
  userMiddlePart: String
}

input BattleSubmitInput {
  battleId: ID!
  middlePart: String!
}

type BattleSubmitPayload {
  battle: Battle!
}

input BattleUpdateInput {
  battleParticipationsCreateInput: [BattleParticipationCreateInput!]!
  gameCode: ID!
  roundIndex: Int!
}

type ConnectToCloudFuncPayload {
  message: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

scalar DateTime

type Game {
  gameCode: String!
  gameRounds: [GameRound!]!
  gameUserLinks: [GameUserLink!]!
  id: ID!
  state: GameState!
}

input GameCreateInput {
  numberOfRounds: Int
}

type GameCreatePayload {
  gameUserLink: GameUserLink!
  token: String
}

input GameJoinInput {
  gameCode: ID!
  name: String!
}

type GameJoinPayload {
  gameUserLink: GameUserLink!
  token: String
}

type GameRound {
  active: Boolean!
  battles: [Battle!]!
  game: Game!
  id: ID!
}

input GameStartInput {
  gameCode: ID!
  numberOfRounds: Int!
}

type GameStartPayload {
  game: Game!
}

enum GameState {
  Attributes
  Battle
  FinalScreen
  Loading
  Prompt
  Results
  Voting
  WaitingToJoin
}

type GameUserLink {
  SVCModel: SVCModel!
  adlibs: [Adlib!]!
  battleParticipations: [BattleParticipation!]!
  battles: [Battle!]!
  game: Game!
  givenAttributesAuthored: [GivenAttribute!]!
  id: ID!
  isHost: Boolean!
  user: User!
}

type GivenAttribute {
  attribute: String
  author: GameUserLink!
  game: Game!
  id: ID!
  target: GameUserLink!
}

input GivenAttributeSubmitInput {
  attribute: String!
  givenAttributeId: ID!
}

type GivenAttributeSubmitPayload {
  givenAttribute: GivenAttribute!
}

type Mutation {
  battleNextActive(input: BattleNextActiveInput!): BattleNextActivePayload
  battleSubmit(input: BattleSubmitInput!): BattleSubmitPayload

  """game gets created instantly (and if eMail then invited)"""
  connectToCloudFunc: ConnectToCloudFuncPayload
  gameCreate: GameCreatePayload
  gameJoin(input: GameJoinInput!): GameJoinPayload

  """start the game"""
  gameStart(input: GameStartInput!): GameStartPayload
  givenAttributeSubmit(input: GivenAttributeSubmitInput!): GivenAttributeSubmitPayload

  """game gets created instantly (and if eMail then invited)"""
  userCreate(input: UserCreateMutationInput!): UserCreatePayload

  """employee gets created instantly (and if eMail then invited)"""
  vote(input: VoteInput!): VotePayload
}

type Query {
  battle(id: ID!): Battle
  battleViewer(userId: ID!): Battle
  battles: [Battle!]!

  """code NOT id"""
  game(gameCode: String!): Game
  gameUserLinkByCode(gameCode: String!): GameUserLink
  user(id: ID!): User
  viewer: User
}

enum SVCModel {
  camila
  carti
  drake
  earlSweatshirt
  frankOcean
  juice
  kanye
  kendrick
  nickyMinaj
  sza
  weeknd
  youngThug
}

type Subscription {
  """code NOT id"""
  game(gameCode: String!): Game
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: String
  battlesWhereParticipant: [BattleParticipation!]!
  gameUserLinks: [GameUserLink!]!
  id: ID!
  name: String!
}

"""User already exists and gets invited"""
input UserCreateInput {
  avatar: String
  name: String!
}

input UserCreateMutationInput {
  user: UserCreateInput!
}

type UserCreatePayload {
  user: User!
}

input UserUpdateInput {
  avatar: String
  deviceId: String
  gameCode: String
  name: String
  score: Int
}

type Vote {
  battleParticipation: BattleParticipation!
  id: ID!
  votee: User!
  voter: User!
}

input VoteCreateInput {
  battleId: ID!
  voteeId: ID!
  voterId: ID!
}

input VoteInput {
  battleParticipationId: ID!
  voterId: ID!
}

type VotePayload {
  battleParticipation: BattleParticipation!
}

input VoteUpdateInput {
  battleId: ID
  voteeId: ID
  voterId: ID
}