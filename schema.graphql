type Battle {
  battleParticipants: [BattleParticipant!]!
  game: Game!
  id: String!
  roundIndex: Int!
}

input BattleCreateInput {
  battleParticipantsCreateInput: [BattleParticipantCreateInput!]!
  gameId: ID!
  roundIndex: Int!
}

input BattleFirstSubmitInput {
  attribute1: String!
  attribute2: String!
  attribute3: String!
  battleId: ID!
  deviceId: String!
}

type BattleFirstSubmitPayload {
  battleParticipant: BattleParticipant!
}

type BattleParticipant {
  attribute1: String
  attribute2: String
  attribute3: String

  """we use a service for this so this is the link to that service"""
  audioURL: String
  battle: Battle!
  id: String!
  openAIFirstPart: String
  participant: User!
  rapText: String
  userMiddlePart: String
  votes: [Vote!]!
}

input BattleParticipantCreateInput {
  attribute1: String
  attribute2: String
  attribute3: String
  battleId: ID!
  openAIFirstPart: String
  participantId: ID!
  rapText: String
  userMiddlePart: String
}

input BattleParticipantUpdateInput {
  attribute1: String
  attribute2: String
  attribute3: String
  battleId: ID
  openAIFirstPart: String
  participantId: ID
  rapText: String
  userMiddlePart: String
}

input BattleSubmitInput {
  battleId: ID!
  deviceId: String!
  middlePart: String!
}

type BattleSubmitPayload {
  battle: Battle!
}

input BattleUpdateInput {
  battleParticipantsCreateInput: [BattleParticipantCreateInput!]!
  gameId: ID!
  roundIndex: Int!
}

type ConnectToCloudFuncPayload {
  message: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

scalar DateTime

type Game {
  battles: [Battle!]!
  gameCode: String!
  id: String!
  numberOfRounds: Int!
  roundIndex: Int!
  state: GameState!
  users: [User!]!
}

input GameCreateInput {
  numberOfRounds: Int
}

type GameCreatePayload {
  user: User!
}

input GameJoinInput {
  gameCode: ID!
  user: UserCreateInput!
}

type GameJoinPayload {
  user: User!
}

input GameStartInput {
  gameId: ID!
}

type GameStartPayload {
  battles: [Battle!]!
  game: Game!
}

enum GameState {
  Battle
  FinalScreen
  Prompt
  Results
  Voting
  WaitingToJoin
}

type Mutation {
  """employee gets created instantly (and if eMail then invited)"""
  battleFirstSubmit(input: BattleFirstSubmitInput!): BattleFirstSubmitPayload
  battleSubmit(input: BattleSubmitInput!): BattleSubmitPayload

  """game gets created instantly (and if eMail then invited)"""
  connectToCloudFunc: ConnectToCloudFuncPayload

  """game gets created instantly (and if eMail then invited)"""
  gameCreate(input: GameCreateInput!): GameCreatePayload

  """game gets created instantly (and if eMail then invited)"""
  gameJoin(input: GameJoinInput!): GameJoinPayload

  """game gets created instantly (and if eMail then invited)"""
  gameStart(input: GameStartInput!): GameStartPayload

  """employee gets created instantly (and if eMail then invited)"""
  vote(input: VoteInput!): VotePayload
}

type Query {
  battle(id: ID!): Battle
  battleViewer(userId: ID!): Battle
  battles: [Battle!]!

  """if no game ID is given, the game is returned, if he has one!"""
  game(gameId: ID!): Game
  user(id: ID!): User
  viewer: User
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: String
  battlesWhereParticipant: [BattleParticipant!]!
  deviceId: String!
  game: Game!
  id: String!
  isHost: Boolean!
  name: String!
  score: Int!
}

"""User already exists and gets invited"""
input UserCreateInput {
  avatar: String
  name: String!
}

input UserUpdateInput {
  avatar: String
  deviceId: String
  gameId: String
  name: String
  score: Int
}

type Vote {
  battleParticipant: BattleParticipant!
  id: String!
  votee: User!
  voter: User!
}

input VoteCreateInput {
  battleId: ID!
  voteeId: ID!
  voterId: ID!
}

input VoteInput {
  battleParticipantId: ID!
  voteeId: ID!
  voterId: ID!
}

type VotePayload {
  battleParticipant: BattleParticipant!
}

input VoteUpdateInput {
  battleId: ID
  voteeId: ID
  voterId: ID
}