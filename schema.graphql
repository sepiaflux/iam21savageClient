type Battle {
  attribute1FirstPlayer: String
  attribute1SecondPlayer: String
  attribute2FirstPlayer: String
  attribute2SecondPlayer: String
  attribute3FirstPlayer: String
  attribute3SecondPlayer: String

  """we use a service for this so this is the link to that service"""
  audioURLFirstPlayer: String

  """we use a service for this so this is the link to that service"""
  audioURLSecondPlayer: String
  firstPlayer: User!
  game: Game!
  id: String!
  openAIFirstPartFirstPlayer: String
  openAIFirstPartSecondPlayer: String
  rapTextFirstPlayer: String
  rapTextSecondPlayer: String
  roundIndex: Int!
  secondPlayer: User!
  userMiddlePartFirstPlayer: String
  userMiddlePartSecondPlayer: String
  votesFirstPlayer: Int!
  votesSecondPlayer: Int!
}

input BattleCreateInput {
  attribute1FirstPlayer: String
  attribute1SecondPlayer: String
  attribute2FirstPlayer: String
  attribute2SecondPlayer: String
  attribute3FirstPlayer: String
  attribute3SecondPlayer: String
  firstPlayerId: ID!
  gameId: ID!
  openAIFirstPartFirstPlayer: String
  openAIFirstPartSecondPlayer: String
  rapTextFirstPlayer: String
  rapTextSecondPlayer: String
  roundIndex: Int!
  secondPlayerId: ID!
  userMiddlePartFirstPlayer: String
  userMiddlePartSecondPlayer: String
}

type BattleFirstSubmitPayload {
  battle: Battle!
}

type BattleSubmitPayload {
  battle: Battle!
}

input BattleUpdateInput {
  attribute1FirstPlayer: String
  attribute1SecondPlayer: String
  attribute2FirstPlayer: String
  attribute2SecondPlayer: String
  attribute3FirstPlayer: String
  attribute3SecondPlayer: String
  battle: Int
  firstPlayerId: ID
  gameId: ID
  openAIFirstPartFirstPlayer: String
  openAIFirstPartSecondPlayer: String
  rapTextFirstPlayer: String
  rapTextSecondPlayer: String
  secondPlayerId: ID
  userMiddlePartFirstPlayer: String
  userMiddlePartSecondPlayer: String
  votesFirstPlayer: Int
}

type BattleVotePayload {
  battle: Battle!
}

type ConnectToCloudFuncPayload {
  message: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

scalar DateTime

type Game {
  battles: [Battle!]!
  gameCode: String!
  id: String!
  numberOfRounds: Int!
  roundIndex: Int!
  state: GameState!
  users: [User!]!
}

input GameCreateInput {
  numberOfRounds: Int
  ownerUser: UserCreateInput!
}

type GameCreatePayload {
  user: User!
}

type GameJoinPayload {
  user: User!
}

type GameStartPayload {
  battles: [Battle!]!
  game: Game!
}

enum GameState {
  Battle
  FinalScreen
  Prompt
  Results
  Voting
  WaitingToJoin
}

type Mutation {
  """employee gets created instantly (and if eMail then invited)"""
  battleFirstSubmit(input: battleFirstSubmitInput!): BattleFirstSubmitPayload

  """employee gets created instantly (and if eMail then invited)"""
  battleSubmit(input: battleSubmitInput!): BattleSubmitPayload

  """employee gets created instantly (and if eMail then invited)"""
  battleVote(input: battleVoteInput!): BattleVotePayload

  """game gets created instantly (and if eMail then invited)"""
  connectToCloudFunc: ConnectToCloudFuncPayload

  """game gets created instantly (and if eMail then invited)"""
  gameCreate(input: GameCreateInput!): GameCreatePayload

  """game gets created instantly (and if eMail then invited)"""
  gameJoin(input: gameJoinInput!): GameJoinPayload

  """game gets created instantly (and if eMail then invited)"""
  gameStart(input: gameStartInput!): GameStartPayload
}

type Query {
  battle(id: ID!): Battle
  battleViewer(userId: ID!): Battle
  battles: [Battle!]!

  """if no game ID is given, the game is returned, if he has one!"""
  game(gameId: ID!): Game
  user(id: ID!): User
  viewer: User
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: String
  deviceId: String!
  game: Game!
  id: String!
  isHost: Boolean!
  name: String!
  owner: Boolean!
  score: Int!
}

"""User already exists and gets invited"""
input UserCreateInput {
  avatar: String
  name: String!
}

input UserUpdateInput {
  avatar: String
  deviceId: String
  gameId: String
  name: String
  score: Int
}

input battleFirstSubmitInput {
  attribute1: String!
  attribute2: String!
  attribute3: String!
  battleId: ID!
  deviceId: String!
}

input battleSubmitInput {
  battleId: ID!
  deviceId: String!
  middlePart: String!
}

input battleVoteInput {
  battleId: ID!
  voteeId: ID!
  voterId: ID!
}

input gameJoinInput {
  gameCode: ID!
  user: UserCreateInput!
}

input gameStartInput {
  gameId: ID!
}